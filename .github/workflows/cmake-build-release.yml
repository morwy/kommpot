name: CMake (release)

on: workflow_dispatch

jobs:
  increment-version:
    runs-on: "ubuntu-latest"
    outputs:
      NEW_TAG_NAME: ${{ steps.version.outputs.NEW_TAG_NAME }}
      RELEASE_ENTRY_CONTENT: ${{ steps.git-cliff-release-entry.outputs.content }}

    steps:
    - name: Increase package version
      id: version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FILE_TO_COMMIT: ProjectVersion.cmake
        DESTINATION_BRANCH: main
        MESSAGE: "chore(release): prepare for upcoming release (ProjectVersion.cmake)"
      run: |
        python IncrementProjectVersion INCREMENT_VERSION
        NEW_VERSION=$(python IncrementProjectVersion GET_VERSION)
        echo "NEW_TAG_NAME=$NEW_VERSION" >> $GITHUB_OUTPUT
        export SHA=$( git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT )
        export CONTENT=$( base64 -i $FILE_TO_COMMIT )
        gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
          --field message="$MESSAGE" \
          --field content="$CONTENT" \
          --field encoding="base64" \
          --field branch="$DESTINATION_BRANCH" \
          --field sha="$SHA"

    - name: Generate a changelog
      uses: orhun/git-cliff-action@v3
      id: git-cliff-release-entry
      with:
        config: cliff.toml
        args: --verbose --strip all --tag v${{ steps.version.outputs.NEW_TAG_NAME }} --unreleased
      env:
        OUTPUT: CHANGES.md

    - name: Get changelog since last release
      uses: orhun/git-cliff-action@v3
      id: git-cliff-file
      with:
        config: cliff.toml
        args: --verbose --tag v${{ steps.version.outputs.NEW_TAG_NAME }}
      env:
        OUTPUT: CHANGELOG.md
  
    - name: Commit CHANGELOG.md
      id: change-log-commit
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FILE_TO_COMMIT: CHANGELOG.md
        DESTINATION_BRANCH: main
        MESSAGE: "chore(release): prepare for upcoming release (CHANGELOG.md)"
      run: |
        export SHA=$( git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT )
        export CONTENT=$( base64 -i $FILE_TO_COMMIT )
        gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
          --field message="$MESSAGE" \
          --field content="$CONTENT" \
          --field encoding="base64" \
          --field branch="$DESTINATION_BRANCH" \
          --field sha="$SHA"

  build-binaries:
    runs-on: ${{ matrix.os }}
    needs: increment-version
    env:
      path-separator: ${{ (startsWith(matrix.os, 'windows-latest') && '\') || '/' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        library_type: [static, shared]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "archive-name=kommpot-${{ needs.increment-version.outputs.NEW_TAG_NAME }}-${{ (startsWith(matrix.os, 'ubuntu-latest') && 'linux') || (startsWith(matrix.os, 'windows-latest') && 'windows') || (startsWith(matrix.os, 'macos-latest') && 'macos') || '' }}_x86_64.zip" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=${{ github.workspace }}${{ env.path-separator }}build" >> "$GITHUB_OUTPUT"
        echo "binary-output-dir=${{ github.workspace }}${{ env.path-separator }}bin${{ env.path-separator }}${{ (startsWith(matrix.os, 'ubuntu-latest') && 'linux') || (startsWith(matrix.os, 'windows-latest') && 'windows') || (startsWith(matrix.os, 'macos-latest') && 'macos') || '' }}_x86_64${{ env.path-separator }}${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Ubuntu-only)
      run: |
        sudo apt update
        sudo apt install libudev-dev ninja-build
      if: matrix.os == 'ubuntu-latest'

    - name: Configure CMake for static libraries
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DIS_COMPILING_STATIC=true -DIS_COMPILING_SHARED=false 
      if: matrix.library_type == 'static'

    - name: Configure CMake for shared libraries
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DIS_COMPILING_STATIC=false -DIS_COMPILING_SHARED=true 
      if: matrix.library_type == 'shared'

    - name: Build libraries
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      # Ignore Windows OS because this actions has bug with wildcards there.
    - name: Check binaries (non-Windows)
      uses: andstor/file-existence-action@v2
      if: matrix.os != 'windows-latest'
      with:
        files: "${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}*"
        ignore_case: true
        fail: true

    - name: Archive built binaries
      run: zip ${{ steps.strings.outputs.archive-name }} ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}* -r

    - name: Upload built binaries
      uses: actions/upload-artifact@v4.3.1
      with:
        name: artifacts-${{ matrix.os }}
        path: ${{ steps.strings.outputs.archive-name }}

  create-release:
    runs-on: "ubuntu-latest"
    needs: [increment-version, build-binaries]

    steps:
    - name: Download built binaries (Windows)
      uses: actions/download-artifact@v4.1.4
      with:
        name: artifacts-windows-latest

    - name: Download built binaries (Linux)
      uses: actions/download-artifact@v4.1.4
      with:
        name: artifacts-ubuntu-latest

    - name: Download built binaries (MacOS)
      uses: actions/download-artifact@v4.1.4
      with:
        name: artifacts-macos-latest

    - name: Create release entry
      uses: ncipollo/release-action@v1
      with:
        artifacts: "*.zip"
        body: "${{ needs.increment-version.outputs.RELEASE_ENTRY_CONTENT }}"
        tag: "v${{ needs.increment-version.outputs.NEW_TAG_NAME }}"